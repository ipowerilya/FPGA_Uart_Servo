// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/20/2019 13:12:09"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          DE10_NANO_SMK_RTL
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DE10_NANO_SMK_RTL_vlg_vec_tst();
// constants                                           
// general purpose registers
reg FPGA_CLK1_25;
reg FPGA_CLK1_50;
reg FPGA_CLK2_50;
reg [35:0] treg_GPIO_0;
reg [35:0] treg_GPIO_1;
reg [0:1] KEY;
reg [3:0] SW;
// wires                                               
wire [35:0] GPIO_0;
wire [35:0] GPIO_1;
wire [7:0] LED;

// assign statements (if any)                          
assign GPIO_0 = treg_GPIO_0;
assign GPIO_1 = treg_GPIO_1;
DE10_NANO_SMK_RTL i1 (
// port map - connection between master ports and signals/registers   
	.FPGA_CLK1_25(FPGA_CLK1_25),
	.FPGA_CLK1_50(FPGA_CLK1_50),
	.FPGA_CLK2_50(FPGA_CLK2_50),
	.GPIO_0(GPIO_0),
	.GPIO_1(GPIO_1),
	.KEY(KEY),
	.LED(LED),
	.SW(SW)
);
initial 
begin 
#1000000 $finish;
end 

// KEY[0]
always
begin
	KEY[0] = 1'b0;
	KEY[0] = #50000 1'b1;
	#50000;
end 

// KEY[1]
initial
begin
	KEY[1] = 1'b0;
end 
// GPIO_1[ 35 ]
initial
begin
	treg_GPIO_1[35] = 1'bZ;
end 
// GPIO_1[ 34 ]
initial
begin
	treg_GPIO_1[34] = 1'bZ;
end 
// GPIO_1[ 33 ]
initial
begin
	treg_GPIO_1[33] = 1'bZ;
end 
// GPIO_1[ 32 ]
initial
begin
	treg_GPIO_1[32] = 1'bZ;
end 
// GPIO_1[ 31 ]
initial
begin
	treg_GPIO_1[31] = 1'bZ;
end 
// GPIO_1[ 30 ]
initial
begin
	treg_GPIO_1[30] = 1'bZ;
end 
// GPIO_1[ 29 ]
initial
begin
	treg_GPIO_1[29] = 1'bZ;
end 
// GPIO_1[ 28 ]
initial
begin
	treg_GPIO_1[28] = 1'bZ;
end 
// GPIO_1[ 27 ]
initial
begin
	treg_GPIO_1[27] = 1'bZ;
end 
// GPIO_1[ 26 ]
initial
begin
	treg_GPIO_1[26] = 1'bZ;
end 
// GPIO_1[ 25 ]
initial
begin
	treg_GPIO_1[25] = 1'bZ;
end 
// GPIO_1[ 24 ]
initial
begin
	treg_GPIO_1[24] = 1'bZ;
end 
// GPIO_1[ 23 ]
initial
begin
	treg_GPIO_1[23] = 1'bZ;
end 
// GPIO_1[ 22 ]
initial
begin
	treg_GPIO_1[22] = 1'bZ;
end 
// GPIO_1[ 21 ]
initial
begin
	treg_GPIO_1[21] = 1'bZ;
end 
// GPIO_1[ 20 ]
initial
begin
	treg_GPIO_1[20] = 1'bZ;
end 
// GPIO_1[ 19 ]
initial
begin
	treg_GPIO_1[19] = 1'bZ;
end 
// GPIO_1[ 18 ]
initial
begin
	treg_GPIO_1[18] = 1'bZ;
end 
// GPIO_1[ 17 ]
initial
begin
	treg_GPIO_1[17] = 1'bZ;
end 
// GPIO_1[ 16 ]
initial
begin
	treg_GPIO_1[16] = 1'bZ;
end 
// GPIO_1[ 15 ]
initial
begin
	treg_GPIO_1[15] = 1'bZ;
end 
// GPIO_1[ 14 ]
initial
begin
	treg_GPIO_1[14] = 1'bZ;
end 
// GPIO_1[ 13 ]
initial
begin
	treg_GPIO_1[13] = 1'bZ;
end 
// GPIO_1[ 12 ]
initial
begin
	treg_GPIO_1[12] = 1'bZ;
end 
// GPIO_1[ 11 ]
initial
begin
	treg_GPIO_1[11] = 1'bZ;
end 
// GPIO_1[ 10 ]
initial
begin
	treg_GPIO_1[10] = 1'bZ;
end 
// GPIO_1[ 9 ]
initial
begin
	treg_GPIO_1[9] = 1'bZ;
end 
// GPIO_1[ 8 ]
initial
begin
	treg_GPIO_1[8] = 1'bZ;
end 
// GPIO_1[ 7 ]
initial
begin
	treg_GPIO_1[7] = 1'bZ;
end 
// GPIO_1[ 6 ]
initial
begin
	treg_GPIO_1[6] = 1'bZ;
end 
// GPIO_1[ 5 ]
initial
begin
	treg_GPIO_1[5] = 1'bZ;
end 
// GPIO_1[ 4 ]
initial
begin
	treg_GPIO_1[4] = 1'bZ;
end 
// GPIO_1[ 3 ]
initial
begin
	treg_GPIO_1[3] = 1'bZ;
end 
// GPIO_1[ 2 ]
initial
begin
	treg_GPIO_1[2] = 1'bZ;
end 
// GPIO_1[ 1 ]
initial
begin
	treg_GPIO_1[1] = 1'bZ;
end 
// GPIO_1[ 0 ]
initial
begin
	treg_GPIO_1[0] = 1'bZ;
end 
// GPIO_0[ 35 ]
initial
begin
	treg_GPIO_0[35] = 1'bZ;
end 
// GPIO_0[ 34 ]
initial
begin
	treg_GPIO_0[34] = 1'bZ;
end 
// GPIO_0[ 33 ]
initial
begin
	treg_GPIO_0[33] = 1'bZ;
end 
// GPIO_0[ 32 ]
initial
begin
	treg_GPIO_0[32] = 1'bZ;
end 
// GPIO_0[ 31 ]
initial
begin
	treg_GPIO_0[31] = 1'bZ;
end 
// GPIO_0[ 30 ]
initial
begin
	treg_GPIO_0[30] = 1'bZ;
end 
// GPIO_0[ 29 ]
initial
begin
	treg_GPIO_0[29] = 1'bZ;
end 
// GPIO_0[ 28 ]
initial
begin
	treg_GPIO_0[28] = 1'bZ;
end 
// GPIO_0[ 27 ]
initial
begin
	treg_GPIO_0[27] = 1'bZ;
end 
// GPIO_0[ 26 ]
initial
begin
	treg_GPIO_0[26] = 1'bZ;
end 
// GPIO_0[ 25 ]
initial
begin
	treg_GPIO_0[25] = 1'bZ;
end 
// GPIO_0[ 24 ]
initial
begin
	treg_GPIO_0[24] = 1'bZ;
end 
// GPIO_0[ 23 ]
initial
begin
	treg_GPIO_0[23] = 1'bZ;
end 
// GPIO_0[ 22 ]
initial
begin
	treg_GPIO_0[22] = 1'bZ;
end 
// GPIO_0[ 21 ]
initial
begin
	treg_GPIO_0[21] = 1'bZ;
end 
// GPIO_0[ 20 ]
initial
begin
	treg_GPIO_0[20] = 1'bZ;
end 
// GPIO_0[ 19 ]
initial
begin
	treg_GPIO_0[19] = 1'bZ;
end 
// GPIO_0[ 18 ]
initial
begin
	treg_GPIO_0[18] = 1'bZ;
end 
// GPIO_0[ 17 ]
initial
begin
	treg_GPIO_0[17] = 1'bZ;
end 
// GPIO_0[ 16 ]
initial
begin
	treg_GPIO_0[16] = 1'bZ;
end 
// GPIO_0[ 15 ]
initial
begin
	treg_GPIO_0[15] = 1'bZ;
end 
// GPIO_0[ 14 ]
initial
begin
	treg_GPIO_0[14] = 1'bZ;
end 
// GPIO_0[ 13 ]
initial
begin
	treg_GPIO_0[13] = 1'bZ;
end 
// GPIO_0[ 12 ]
initial
begin
	treg_GPIO_0[12] = 1'bZ;
end 
// GPIO_0[ 11 ]
initial
begin
	treg_GPIO_0[11] = 1'bZ;
end 
// GPIO_0[ 10 ]
initial
begin
	treg_GPIO_0[10] = 1'bZ;
end 
// GPIO_0[ 9 ]
initial
begin
	treg_GPIO_0[9] = 1'bZ;
end 
// GPIO_0[ 8 ]
initial
begin
	treg_GPIO_0[8] = 1'bZ;
end 
// GPIO_0[ 7 ]
initial
begin
	treg_GPIO_0[7] = 1'bZ;
end 
// GPIO_0[ 6 ]
initial
begin
	treg_GPIO_0[6] = 1'bZ;
end 
// GPIO_0[ 5 ]
initial
begin
	treg_GPIO_0[5] = 1'bZ;
end 
// GPIO_0[ 4 ]
initial
begin
	treg_GPIO_0[4] = 1'bZ;
end 
// GPIO_0[ 3 ]
initial
begin
	treg_GPIO_0[3] = 1'bZ;
end 
// GPIO_0[ 2 ]
initial
begin
	treg_GPIO_0[2] = 1'bZ;
end 
// GPIO_0[ 1 ]
initial
begin
	treg_GPIO_0[1] = 1'bZ;
end 
// GPIO_0[ 0 ]
initial
begin
	treg_GPIO_0[0] = 1'bZ;
end 
endmodule

